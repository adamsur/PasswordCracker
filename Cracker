#!/usr/bin/python3

from passlib.hash import lmhash
from passlib.hash import nthash
import crypt
import sys

print("")

#If -v is an argument verbosePrint will be defined or else it will be None
if "-v" in sys.argv:
    def verbosePrint(text):
        print(text)
else:
    verbosePrint = lambda a : None

#Usage page for using the cracker, displayed for errors and the -h argument
def usage():
    print("Usage: Cracker HashType Hash Wordlist")
    print("Alternate NTLM Usage: Cracker NTLMHash Wordlist")
    print("")
    print("Hash options: Unix, LM, NT")
    print("")
    print("Additional Options:")
    print("(Goes after Wordlist)")
    print("-h [Help/Usage], -v [Verbose], -s [Salt] (Used for Unix Hash, defaults to HX)")
    print("")
    print("Examples:\nCracker NT 8846F7EAEE8FB117AD06BDD830B7586C wordlist.txt -v")
    print("Cracker Joe:501:E52CAC67419A9A224A3B108F3FA6CB6D:8846F7EAEE8FB117AD06BDD830B7586C::: wordlist.txt")

#Function for cracking Unix hashes
def crackUnix(hash, wordList, salt):

#Each word in the list is hashed with the provided salt (none provided means "HX" is the hash), then compared to the provided hash
    for word in wordList:
        resultsUnix = crypt.crypt(word, salt)
        if resultsUnix == hash : #If one of the hashes match, the word/password is returned
            return word
        verbosePrint("[*] {word} = {result}, Hash does not match...\n".format(word=word, result=resultsUnix))

#If none of the words on the wordlist match the original hash the program ends
    print("No word in the list matches the hash provided with {salt} as a salt".format(salt=salt))
    sys.exit(0)

#Function for cracking Lan Manager hashes
def crackLM(hash, wordList):
    if len(hash) != 32: #Checks for valid hash by making sure it is 32 characters long
        print("[-] The hash entered is not a Lan Manager hash.\n~LM hashes must be 32 characters long~")
        sys.exit(0)

    #Compares each word and hash using the method verify(), if the verify comes back as True the word is returned
    for word in wordList:
        resultsLM = lmhash.verify(word, hash)
        if resultsLM == True:
            return word
        verbosePrint("[*] {word}, Hash does not match...\n".format(word=word))

    print("No word in the list matches the Lan Manager hash provided")
    sys.exit(0)

#Function for cracking Windows NT hashes
def crackNT(hash, wordList):
    if len(hash) != 32: #Makes sure hash is 32 characters long
        print("[-] The hash entered is not an NT hash.\n~NT hashes must be 32 characters long~")
        sys.exit(0)

    #Compares each word and hash using verify(), will return word if True
    for word in wordList:
        resultsNT = nthash.verify(word, hash)
        if resultsNT == True:
            return word
        verbosePrint("[*] {word}, Hash does not match... \n".format(word=word))

    print("No word in the list matches the NT hash provided")
    sys.exit(0)

#Function for NTLM hashes, splits hash dump at ":" then grabs the NT hash and wordlist file
def NTLMhash():
    NTLM = sys.argv[1]
    NTLM = NTLM.split(":")
    hash = NTLM[3]
    file = sys.argv[2]
    return hash, file

#Function for opening wordlist file and putting each word into a list
def readFile(file):
    wordList = []

    fileOpen = open(file)
    try:
        for line in fileOpen: #Goes through lines of the file and adds each word to a list
            line = line.rstrip()
            wordList.append(line)
    except:
        next(fileOpen)
    return wordList


def main():
    hashType = ""

    if len(sys.argv) > 3:
    #Takes first and second arguments of script, makes them variables
        hashType = sys.argv[1]
        hash = sys.argv[2]
        file = sys.argv[3]

    #Checking for NTLM hashing method, makes sure no help argument is used
    if len(sys.argv) == 3 and sys.argv[:3] != '-h':
        hash, file = NTLMhash()

    #Checks for help argument and displays usage page
    if "-h" in sys.argv:
        usage()
        sys.exit(0)

    #Salt for Unix hash, if salt is not defined it defaults to "HX"
    if "-s" in sys.argv:
        salt = sys.argv[sys.argv.index("-s")+1]
    else:
        salt = "HX"

    try:
        wordList = readFile(file)
    except:
        usage()
        sys.exit(1)

    #Checks for hashtype being NT, LM, or Unix
    if hashType == "NT" or hashType == "":
        hashMatch = crackNT(hash, wordList)
    elif hashType == "LM":
        hashMatch = crackLM(hash, wordList)
    elif hashType == "Unix":
        hashMatch = crackUnix(hash, wordList, salt)
    else:
        print("[-] Hashtype not defined correctly!\n")
        usage()
        sys.exit(0)

    print("[+] A match was found for {hash} \nThe password is {hashMatch}".format(hash=hash, hashMatch=hashMatch))
    sys.exit(0)

if __name__ == "__main__":
    main()
